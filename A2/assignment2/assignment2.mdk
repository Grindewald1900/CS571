

# CS571 Assignment2

## Authors

Yi Ren  (002269013)

YREN19@UBishops.ca


Wentao Lu (002276355)

WLU19@UBishops.ca

## Exercises

### Given an adjacency list representation of a digraph:
&emsp;**(a)Give the cost of computing the out-degree of every vertex.**  
&emsp;&emsp;&emsp; The cost is |E|.  
&emsp;&emsp;&emsp; Suppose that the graph G(V ,E) has a list representation which has |V| lists, and the length of 
the lists is |E|. So the cost is |E| because the sum of the out-degree is equal to the sum of the edges, we need to 
do |E| times calculations to figure out the cost.  

&emsp;**(b)What is the cost of the previous operation if each list stores its length?**  
&emsp;&emsp;&emsp; The cost is |V|.  
&emsp;&emsp;&emsp; The only calculation is to add up all the lengths for each list, and the number of the lists is |V|.

&emsp;**(c)What is the cost of computing the in-degrees?**  
&emsp;&emsp;&emsp; The cost is |E|.  
&emsp;&emsp;&emsp; For a digraph, the number of the in-degree is equal to that of the out-degree.

### The transpose of a directed graph G = (V, E) is the graph GT = (V, Et) where ET = {(v, u) e V x V : (u,v) G E}. Thus, GT is G with all its edges reversed.
&emsp;**(a)Describe efficient algorithms for computing GT from G, for both the adiacencv-list and adiacencv-matrix representations of G.**  
&emsp;&emsp;&emsp; Suppose that the vertex set V includes n vertices v1,v2... vn.  
&emsp;&emsp;&emsp; For the adjacency-list, we need to check every edge e(u,v) $\in$ E to determine one list.
For example, to compute v1 list, we should check all the edges to find out every edge that has an end point v1, and 
then put it's start point in the list. In this way , the cost of computation should be |E|$\times$|V|.  
&emsp;&emsp;&emsp; For the adjacency-matrix, the only thing we need to do is changing the value of entry<sub>ij</sub>
and  entry<sub>ji</sub> ( 1 $\leq$ i < j  $\leq$ n ), so the cost will be $\frac{|V|(|V| - 1)}{2}$.

&emsp;**(b)Analyze the running times of your algorithms.**  
&emsp;&emsp;&emsp;  As is mentioned above, the running time for the adjacency-list representation is |E|$\times$|V|
while the adjacency-matrix is  $\frac{|V| ( |V| - 1 )}{2}$.  


### The complement graph of a simple graph G = (V, E) is the graph $\overrightarrow{G}$ = (V,E), where 
~ Center
E = {(u,v) G V x V : (u,v) G E}.
~
**Thus, two vertices are adjacent in G if and only if they are not adjacent in G.**  
&emsp;** (a)Describe efficient algorithms for computing G from G, for both the adiacencv-list and adiacencv-matrix representations of G.**  
&emsp;&emsp;&emsp; Suppose that the vertex set V includes n vertices v1,v2... vn.  
&emsp;&emsp;&emsp; For the adjacency-list, if a vertex is neither in the adjacency-list of G nor the vertex itself, we put it in the 
adjacency-list of $\overrightarrow{G}$. For example , if we have 4 vertices V1 V2 V3 V4, the adiacencv-list of G is as below:
<center>
<table>
        <tr>
            <th>Initial Vertex</th>
            <th>Terminal Vertex</th>
        </tr>
        <tr>
            <th>V1</th>
            <th>V4</th>
        </tr>
        <tr>
            <th>V2</th>
            <th>V3 V4</th>
        </tr>
        <tr>
            <th>V3</th>
            <th>V2</th>
        </tr>
        <tr>
            <th>V4</th>
            <th>V1 V2</th>
        </tr>
    </table></center>
    
&emsp;&emsp;&emsp; To figure out the list of V1 in $\overrightarrow{G}$, we need to check if V2 V3 and V4 are in the list above, considering V4
is in the list, we put V2 and V3 in the new list.  
&emsp;&emsp;&emsp; For the adjacency-matrix, we need to check every entry<sub>ij</sub> (i $\neq$ j), and reverse it's 
value between 0 and 1.

&emsp;**(b)Analyze the running times of your algorithms.**  
&emsp;&emsp;&emsp;  As is mentioned above, the running time for the adjacency-list representation is |V| $\times$ (|V| - 1)
and the adjacency-matrix is also |V| $\times$ (|V| - 1).

###4.Let G = (V, E) be a simple graph and G = (V, E) its complement. If |E| = 56 and |E'| = 80, find the value of |V|.
&emsp;&emsp;&emsp; |V| = 17  
&emsp;&emsp;&emsp; Suppose that G has n vertices, G<sub>2</sub> = (V, E $\cup$ E') will be the complete graph with these n vertices.
The number of edges for G<sub>2</sub> is  $\frac{n ( n - 1 )}{2}$, so we have :
~ Center
_56 + 80 = $\frac{n ( n - 1 )}{2}$_
~
&emsp;&emsp;&emsp; So, n = 17 or n = -16.   
&emsp;&emsp;&emsp; Considering that n is a positive integer , n = 17. 



###How much storage is needed to represent a simple graph with n vertices and m edges using
**(a)adjacency lists?**  
&emsp;&emsp;&emsp;Memory space : m + n   

**(b)an adjacency matrix?**  
&emsp;&emsp;&emsp;Memory space : n<sup>2</sup>  

**(c)an incidence matrix?**  
&emsp;&emsp;&emsp;Memory space : m $\times$ n
  

###Determine whether each pair of graphs below is isomorphic. Exhibit an isomorphism or provide a rigorous argument that none exists.  
  
![图片1]

[图片1]: images/-1.png "图片1" { width:auto; max-width:90% }

&emsp;&emsp;&emsp;It's not isomorphic because G2 has a vertex with 4 degrees while G1 doesn't.  

![图片2]
 

[图片2]: images/-2.png "图片2" { width:auto; max-width:90% }
&emsp;&emsp;&emsp;It is isomorphic, and the bijection is as below:
<center>
<table>
        <tr><th>G1 </th><th>G2</th></tr>
        <tr><th>------</th><th>------</th></tr>
        <tr>
            <th>U1</th>
            <th>V4</th>
        </tr>
        <tr>
            <th>U2</th>
            <th>V3</th>
        </tr>
        <tr>
            <th>U3</th>
            <th>V6</th>
        </tr>
        <tr>
            <th>U4</th>
            <th>V5</th>
        </tr>
        <tr>
            <th>U5</th>
            <th>V1</th>
        </tr>
        <tr>
            <th>U6</th>
            <th>V2</th>
        </tr>
    </table></center>
&emsp;&emsp;&emsp;The adjacency matrix is :
&emsp;&emsp;&emsp; <center>$$
 \left\{
 \begin{matrix}
   0 & 1 & 0 & 1 & 0 & 0\\
   1 & 0 & 1 & 0 & 0 & 1\\
   0 & 1 & 0 & 1 & 0 & 0\\
   1 & 0 & 1 & 0 & 1 & 1\\
   0 & 0 & 0 & 1 & 0 & 1\\
   0 & 1 & 0 & 1 & 1 & 0\\
  \end{matrix}
  \right\}   G1
$$  </center> 
&emsp;&emsp;&emsp; <center>$$
 \left\{
 \begin{matrix}
   0 & 1 & 0 & 1 & 0 & 0\\
   1 & 0 & 1 & 0 & 0 & 1\\
   0 & 1 & 0 & 1 & 0 & 0\\
   1 & 0 & 1 & 0 & 1 & 1\\
   0 & 0 & 0 & 1 & 0 & 1\\
   0 & 1 & 0 & 1 & 1 & 0\\
  \end{matrix}
  \right\}   G2
$$  </center> 

&emsp;&emsp;&emsp; It's obviously that two graphs are isomorphic.


###Suppose that G and H are isomorphic simple graphs. Show that their complement graphs G and H are also isomorphic.  
&emsp;&emsp;&emsp; G and H are isomophic so that they have the same adjacency matrix, hence the complement graphs 
of G and H will also have the same adjacency matrix, because we conversed all the entries.In this way, the complement graphs 
are isomorphic.  

###Show that the property that a graph is bipartite is an isomorphic in-variant.
&emsp;&emsp;&emsp; Suppose the graph G = (V , E ) and it's isomorphic graph H = (W ,F ), f is the bijection from V to W.  
&emsp;&emsp;&emsp; If G is bipartite, let (V<sub>1</sub>，V<sub>2</sub>) a bipartition of G, then we divide W into two parts W<sub>1</sub> and W<sub>2</sub>.
 Let W<sub>1</sub> = f (V<sub>1</sub>), W<sub>2</sub> = f(V<sub>2</sub>).  
&emsp;&emsp;&emsp; For every edge e (u, v)  $\in$ E , we have u  $\in$ V<sub>1</sub> and v  $\in$ V<sub>2</sub>.  
&emsp;&emsp;&emsp; hence f(u) $\in$ W<sub>1</sub> and f(v) $\in$ W<sub>2</sub>, which means every edge in F will 
have the start point in W<sub>1</sub> and end point in W<sub>2</sub>.  
&emsp;&emsp;&emsp; So (W<sub>1</sub>, W<sub>2</sub> ) is the bipartition for graph H , and H is also bipartite.


###The degree sequence of a graph is the sequence of the degrees of the vertices of the graph in non-increasing order. Find a pair of non-isomorphic graphs with the same degree sequence such that one graph is bipartite, but the other graph is not bipartite.  
&emsp;&emsp;&emsp;

&emsp;&emsp;&emsp; &emsp;&emsp;&emsp; 
![未命名文件]

[未命名文件]: images/-.png "未命名文件" { width:auto; max-width:90% }



<br>  
  
 </br>
